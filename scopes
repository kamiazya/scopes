#!/bin/bash

##############################################################################
#
#   Scopes CLI start up script for POSIX generated by Scopes project.
#
#   This script provides a Gradle wrapper-style development experience for
#   the Scopes CLI, making it easier to debug and test during development.
#
##############################################################################

# Attempt to set APP_HOME
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
        /*)   app_path=$link ;; #(
        *)    app_path=$APP_HOME$link ;;
    esac
done

# Discard cd standard output in case $CDPATH is set
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Default configuration
DEFAULT_LOG_LEVEL="INFO"
DEFAULT_TRANSPORT="local"
DEFAULT_JVM_OPTS=""

# JAR configuration
JAR_NAME="scopes-all.jar"
JAR_PATH="$APP_HOME/apps/scopes/build/libs/$JAR_NAME"

# Load wrapper configuration if it exists
WRAPPER_CONFIG="$APP_HOME/.scopes/wrapper.properties"
if [ -f "$WRAPPER_CONFIG" ]; then
    while IFS='=' read -r key value
    do
        case $key in
            scopes.log.level) DEFAULT_LOG_LEVEL="$value" ;;
            scopes.transport) DEFAULT_TRANSPORT="$value" ;;
            scopes.jvm.opts) DEFAULT_JVM_OPTS="$value" ;;
        esac
    done < "$WRAPPER_CONFIG"
fi

# Parse wrapper-specific arguments
DEBUG_MODE=false
PROFILE_MODE=false
JVM_DEBUG_PORT=5005
JVM_OPTS="$DEFAULT_JVM_OPTS"
LOG_LEVEL="$DEFAULT_LOG_LEVEL"
TRANSPORT="$DEFAULT_TRANSPORT"
GRADLE_TASK="run"
USE_JAR=false
REMAINING_ARGS=()

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

show_help() {
    cat << EOF
Scopes CLI Development Wrapper

USAGE:
    ./scopes [WRAPPER_OPTIONS] [CLI_ARGUMENTS...]

WRAPPER OPTIONS:
    --debug                 Enable JVM debug mode (port $JVM_DEBUG_PORT)
    --debug-port PORT       Set JVM debug port (default: $JVM_DEBUG_PORT)
    --profile               Enable JVM profiling
    --log-level LEVEL       Set log level (TRACE|DEBUG|INFO|WARN|ERROR)
    --transport TYPE        Set transport (local|grpc)
    --gradle-task TASK      Force Gradle mode with specific task
    --build-jar             Build the JAR file and exit
    --jvm-opts OPTS         Additional JVM options
    --help-wrapper          Show this wrapper help

CLI ARGUMENTS:
    All remaining arguments are passed to the Scopes CLI application.
    Use './scopes help' to see CLI-specific help.

EXAMPLES:
    ./scopes --debug create "My Task"
    ./scopes --log-level DEBUG list
    ./scopes --transport grpc --debug info
    ./scopes --profile --gradle-task build

CONFIGURATION:
    Create $APP_HOME/.scopes/wrapper.properties to set defaults:
        scopes.log.level=DEBUG
        scopes.transport=grpc
        scopes.jvm.opts=-Xmx1g
EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --debug)
            DEBUG_MODE=true
            shift
            ;;
        --debug-port)
            JVM_DEBUG_PORT="$2"
            shift 2
            ;;
        --profile)
            PROFILE_MODE=true
            shift
            ;;
        --log-level)
            LOG_LEVEL="$2"
            shift 2
            ;;
        --transport)
            TRANSPORT="$2"
            shift 2
            ;;
        --gradle-task)
            USE_JAR=false  # Force Gradle mode
            GRADLE_TASK="$2"
            shift 2
            ;;
        --build-jar)
            echo "üî® Building JAR file..."
            "$APP_HOME/gradlew" :apps-scopes:fatJar || die "Failed to build JAR"
            echo "‚úÖ JAR built successfully"
            exit 0
            ;;
        --jvm-opts)
            JVM_OPTS="$JVM_OPTS $2"
            shift 2
            ;;
        --help-wrapper)
            show_help
            exit 0
            ;;
        *)
            REMAINING_ARGS+=("$1")
            shift
            ;;
    esac
done

# Check if JAR exists and set mode
if [ -f "$JAR_PATH" ]; then
    USE_JAR=true
    echo "üì¶ Using compiled JAR: $JAR_PATH"
else
    echo "üîß Using Gradle for development mode"
    echo "   (JAR not found at $JAR_PATH)"
    echo "   Run './gradlew :apps-scopes:fatJar' to build the JAR"
fi

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Check Java version (require Java 21+)
JAVA_VERSION=$($JAVACMD -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
if [ -z "$JAVA_VERSION" ]; then
    # Try alternative parsing for different Java version formats
    JAVA_VERSION=$($JAVACMD -version 2>&1 | grep -oE 'version "[0-9]+' | grep -oE '[0-9]+$')
fi

if [ -n "$JAVA_VERSION" ] && [ "$JAVA_VERSION" -lt 21 ]; then
    die "ERROR: Java 21 or higher is required. Current version: $JAVA_VERSION

Please install Java 21 or higher and update your JAVA_HOME."
fi

# Build JVM arguments
if [ "$DEBUG_MODE" = true ]; then
    JVM_OPTS="$JVM_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$JVM_DEBUG_PORT"
    echo "üêõ Debug mode enabled on port $JVM_DEBUG_PORT"
fi

if [ "$PROFILE_MODE" = true ]; then
    JVM_OPTS="$JVM_OPTS -XX:+FlightRecorder -XX:StartFlightRecording=duration=60s,filename=scopes-profile.jfr"
    echo "üìä Profiling enabled (output: scopes-profile.jfr)"
fi

# Set environment variables for the CLI
export SCOPES_LOG_LEVEL="$LOG_LEVEL"
export SCOPES_TRANSPORT="$TRANSPORT"

echo "üöÄ Starting Scopes CLI..."
echo "   Log Level: $LOG_LEVEL"
echo "   Transport: $TRANSPORT"
if [ "$DEBUG_MODE" = true ] || [ "$PROFILE_MODE" = true ]; then
    echo "   JVM Options: $JVM_OPTS"
fi
if [ ${#REMAINING_ARGS[@]} -gt 0 ]; then
    echo "   CLI Args: ${REMAINING_ARGS[*]}"
fi
echo

if [ "$USE_JAR" = true ]; then
    # Execute JAR directly
    exec "$JAVACMD" $JVM_OPTS -jar "$JAR_PATH" "${REMAINING_ARGS[@]}"
else
    # Use Gradle for development
    GRADLE_ARGS=()
    GRADLE_ARGS+=("$GRADLE_TASK")

    if [ "$GRADLE_TASK" = "run" ]; then
        GRADLE_ARGS+=(":apps-scopes:run")
        if [ ${#REMAINING_ARGS[@]} -gt 0 ]; then
            # Join arguments with proper quoting for Gradle
            CLI_ARGS=""
            for arg in "${REMAINING_ARGS[@]}"; do
                if [[ "$arg" == *" "* ]]; then
                    CLI_ARGS="$CLI_ARGS \"$arg\""
                else
                    CLI_ARGS="$CLI_ARGS $arg"
                fi
            done
            GRADLE_ARGS+=("--args=$CLI_ARGS")
        fi
    else
        GRADLE_ARGS+=("${REMAINING_ARGS[@]}")
    fi

    # Set GRADLE_OPTS for JVM options
    export GRADLE_OPTS="$JVM_OPTS"

    # Execute Gradle with the CLI
    exec "$APP_HOME/gradlew" "${GRADLE_ARGS[@]}"
fi

