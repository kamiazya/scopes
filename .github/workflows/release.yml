name: Release

on:
  push:
    tags: ['v*.*.*', 'v*.*.*-*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: read
  id-token: write
  attestations: write

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@7f488cf82a3629ee755e4e97342c01d6bed318fa # v1.3.5
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        # Remove 'v' prefix for SemVer compatibility (v1.0.0 -> 1.0.0)
        CLEAN_VERSION=${VERSION#v}
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $CLEAN_VERSION (from tag: $VERSION)"

    - name: Build native binary
      run: ./gradlew nativeCompile -Pversion=${{ steps.version.outputs.version }}

    - name: Prepare binary for upload
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "win32" ]; then
          BINARY_NAME="scopes-${{ steps.version.outputs.tag_version }}-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          cp presentation-cli/build/native/nativeCompile/scopes.exe "$BINARY_NAME"
        else
          BINARY_NAME="scopes-${{ steps.version.outputs.tag_version }}-${{ matrix.platform }}-${{ matrix.arch }}"
          cp presentation-cli/build/native/nativeCompile/scopes "$BINARY_NAME"
        fi
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
      id: binary

    - name: Generate SBOM (CycloneDX)
      run: ./gradlew presentation-cli:cycloneDxBom


    - name: Generate hash for SLSA provenance
      shell: bash
      id: hash
      run: |
        set -euo pipefail
        echo "Generating hash for: ${{ steps.binary.outputs.binary_name }}"

        # Generate SHA256 hash for binary
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          HASH=$(certutil -hashfile "${{ steps.binary.outputs.binary_name }}" SHA256 | findstr /v "hash" | findstr /v "CertUtil")
          HASH=$(echo $HASH | tr -d '[:space:]')
        else
          HASH=$(sha256sum "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        fi

        echo "Hash: $HASH"
        echo "${{ steps.binary.outputs.binary_name }}:$HASH" >> hashes.txt

        # Generate hashes for SBOM files
        if [ -f "presentation-cli/build/reports/bom.json" ]; then
          SBOM_JSON_HASH=$(sha256sum "presentation-cli/build/reports/bom.json" | awk '{print $1}')
          echo "sbom-${{ matrix.platform }}-${{ matrix.arch }}.json:$SBOM_JSON_HASH" >> hashes.txt
        fi

        if [ -f "presentation-cli/build/reports/bom.xml" ]; then
          SBOM_XML_HASH=$(sha256sum "presentation-cli/build/reports/bom.xml" | awk '{print $1}')
          echo "sbom-${{ matrix.platform }}-${{ matrix.arch }}.xml:$SBOM_XML_HASH" >> hashes.txt
        fi

        # Create base64 encoded hash for SLSA (portable across Linux and macOS)
        echo "${{ steps.binary.outputs.binary_name }}:sha256:$HASH" | base64 | tr -d '\n' >> hashes-b64.txt
        
        # Set output variable for downstream steps
        ALL_HASHES=$(cat hashes.txt | tr '\n' ' ' | sed 's/ $//')
        echo "hashes=$ALL_HASHES" >> $GITHUB_OUTPUT

    - name: Upload binary artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: binary-${{ matrix.platform }}-${{ matrix.arch }}
        path: ${{ steps.binary.outputs.binary_name }}

    - name: Prepare SBOM files for upload
      shell: bash
      run: |
        # Copy SBOM files with platform-specific names
        if [ -f "presentation-cli/build/reports/bom.json" ]; then
          cp "presentation-cli/build/reports/bom.json" "sbom-${{ matrix.platform }}-${{ matrix.arch }}.json"
        fi

        if [ -f "presentation-cli/build/reports/bom.xml" ]; then
          cp "presentation-cli/build/reports/bom.xml" "sbom-${{ matrix.platform }}-${{ matrix.arch }}.xml"
        fi

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: sbom-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          sbom-${{ matrix.platform }}-${{ matrix.arch }}.json
          sbom-${{ matrix.platform }}-${{ matrix.arch }}.xml


    - name: Upload hash artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: hashes-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          hashes.txt
          hashes-b64.txt

  collect-hashes:
    name: Collect Hashes for SLSA
    runs-on: ubuntu-latest
    needs: build-release
    outputs:
      hashes: ${{ steps.collect.outputs.hashes }}

    steps:
    - name: Download all hash artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: hashes-*
        merge-multiple: true

    - name: Collect all hashes
      id: collect
      run: |
        set -euo pipefail
        echo "Collecting hashes from all platforms..."

        # Combine all hash files
        cat hashes-b64.txt > combined-hashes-b64.txt || echo "" > combined-hashes-b64.txt

        # Create a single base64 encoded string with all hashes
        HASHES_B64=$(cat combined-hashes-b64.txt | tr '\n' ',' | sed 's/,$//')
        echo "hashes=$HASHES_B64" >> $GITHUB_OUTPUT

        echo "Collected hashes:"
        cat hashes.txt || echo "No hashes.txt found"

  provenance:
    name: Generate SLSA Provenance
    needs: [build-release, collect-hashes]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.3.0
    with:
      base64-subjects: "${{ needs.collect-hashes.outputs.hashes }}"
      upload-assets: true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, provenance]
    if: always() && needs.build-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        # Remove 'v' prefix for SemVer compatibility (v1.0.0 -> 1.0.0)
        CLEAN_VERSION=${VERSION#v}
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        path: artifacts

    - name: Download all SBOM artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: sbom-*
        path: sbom-artifacts
        merge-multiple: true


    - name: Download SLSA provenance
      if: needs.provenance.result == 'success'
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: "${{ needs.provenance.outputs.provenance-name }}"
        path: provenance

    - name: Display downloaded artifacts
      run: find artifacts -type f -name "*" | head -20

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git log since last tag
        LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 2 | tail -n 1)
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG="Initial release"
        else
          CHANGELOG=$(git log --pretty=format:'- %s (%h)' $LAST_TAG..${{ steps.version.outputs.tag_version }} | head -20)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Bug fixes and improvements"
          fi
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ steps.version.outputs.tag_version }}
        name: Release ${{ steps.version.outputs.tag_version }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}

          ## Installation

          Download the appropriate binary for your platform from the assets below.

          ### Linux/macOS
          ```bash
          chmod +x scopes-*
          sudo mv scopes-* /usr/local/bin/scopes
          ```

          ### Windows
          Extract `scopes-*.exe` to a directory in your PATH.

          ## Security & Verification

          This release includes SLSA Level 3 provenance and Software Bill of Materials (SBOM) for comprehensive supply chain security.

          ### SLSA Provenance Verification
          ```bash
          # Install slsa-verifier
          go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest

          # Verify the binary (example for Linux)
          slsa-verifier verify-artifact scopes-v${{ steps.version.outputs.tag_version }}-linux-x64 \
            --provenance-path multiple.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          ```

          ### SBOM (Software Bill of Materials)

          Each platform includes SBOM files in both industry-standard formats:
          - **CycloneDX** (JSON/XML): Security-focused with vulnerability tracking capabilities
          - Download: `sbom-{platform}-{arch}.json` or `sbom-{platform}-{arch}.xml`

          #### SBOM Usage Examples
          ```bash
          # Analyze dependencies with CycloneDX tools
          cyclonedx-cli analyze sbom-linux-x64.json

          # Import into OWASP Dependency-Track
          curl -X POST "http://dtrack-server/api/v1/bom" \
            -H "X-API-Key: your-api-key" \
            -H "Content-Type: application/json" \
            -d @sbom-linux-x64.json
          ```

          ### Manual Verification
          See the checksums in `hashes.txt` for manual verification of binaries and SBOM files.
        files: |
          artifacts/*/scopes-*
          artifacts/*/hashes.txt
          sbom-artifacts/sbom-*.json
          sbom-artifacts/sbom-*.xml
        draft: false
        prerelease: ${{ contains(steps.version.outputs.tag_version, '-') }}
        generate_release_notes: true
