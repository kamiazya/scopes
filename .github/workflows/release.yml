name: Release

on:
  push:
    tags: ['v*.*.*', 'v*.*.*-*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: read
  id-token: write
  attestations: write

jobs:
  extract-version:
    name: Extract Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_version: ${{ steps.version.outputs.tag_version }}

    steps:
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        # Remove 'v' prefix for SemVer compatibility (v1.0.0 -> 1.0.0)
        CLEAN_VERSION=${VERSION#v}
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $CLEAN_VERSION (from tag: $VERSION)"

  build-release:
    name: Build Release Artifacts
    needs: extract-version
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.extract-version.outputs.version }}
      binary-prefix: scopes-${{ needs.extract-version.outputs.tag_version }}

  generate-sbom:
    name: Generate SBOM for Release
    runs-on: ubuntu-latest
    needs: [extract-version, build-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@7f488cf82a3629ee755e4e97342c01d6bed318fa # v1.3.5
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

    - name: Generate SBOM (CycloneDX)
      run: ./gradlew presentation-cli:cycloneDxBom

    - name: Prepare SBOM files for upload
      shell: bash
      run: |
        # Copy SBOM files with platform-specific names for each platform
        for platform in linux darwin win32; do
          for arch in x64; do
            if [ -f "presentation-cli/build/reports/bom.json" ]; then
              cp "presentation-cli/build/reports/bom.json" "sbom-${platform}-${arch}.json"
            fi
            if [ -f "presentation-cli/build/reports/bom.xml" ]; then
              cp "presentation-cli/build/reports/bom.xml" "sbom-${platform}-${arch}.xml"
            fi
          done
        done

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: release-sbom
        path: |
          sbom-*.json
          sbom-*.xml

  collect-hashes:
    name: Collect Hashes for SLSA
    runs-on: ubuntu-latest
    needs: build-release
    outputs:
      hashes: ${{ steps.collect.outputs.hashes }}

    steps:
    - name: Download all binary artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: build-binary-*
        path: binaries
        merge-multiple: true

    - name: Collect all hashes
      id: collect
      run: |
        set -euo pipefail
        echo "Collecting hashes from all platforms..."

        cd binaries

        # Generate base64 encoded hashes for SLSA
        COMBINED_HASHES=""
        for hash_file in binary-hash-*.txt; do
          if [ -f "$hash_file" ]; then
            echo "Processing: $hash_file"
            cat "$hash_file"

            # Extract binary name and hash
            BINARY_NAME=$(cut -d':' -f1 "$hash_file")
            HASH=$(cut -d':' -f2 "$hash_file")

            # Create base64 encoded entry for SLSA
            B64_ENTRY=$(echo "${BINARY_NAME}:sha256:${HASH}" | base64 | tr -d '\n')

            if [ -z "$COMBINED_HASHES" ]; then
              COMBINED_HASHES="$B64_ENTRY"
            else
              COMBINED_HASHES="${COMBINED_HASHES},$B64_ENTRY"
            fi
          fi
        done

        echo "hashes=$COMBINED_HASHES" >> $GITHUB_OUTPUT
        echo "Combined hashes: $COMBINED_HASHES"

  provenance:
    name: Generate SLSA Provenance
    needs: [build-release, collect-hashes]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.3.0
    with:
      base64-subjects: "${{ needs.collect-hashes.outputs.hashes }}"
      upload-assets: true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [extract-version, build-release, generate-sbom, provenance]
    if: always() && needs.build-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Download all artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        path: artifacts

    - name: Download SBOM artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: release-sbom
        path: sbom-artifacts


    - name: Download SLSA provenance
      if: needs.provenance.result == 'success'
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: "${{ needs.provenance.outputs.provenance-name }}"
        path: provenance

    - name: Display downloaded artifacts
      run: find artifacts -type f -name "*" | head -20

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git log since last tag
        LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 2 | tail -n 1)
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG="Initial release"
        else
          CHANGELOG=$(git log --pretty=format:'- %s (%h)' $LAST_TAG..${{ needs.extract-version.outputs.tag_version }} | head -20)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Bug fixes and improvements"
          fi
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ needs.extract-version.outputs.tag_version }}
        name: Release ${{ needs.extract-version.outputs.tag_version }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}

          ## Installation

          Download the appropriate binary for your platform from the assets below.

          ### Linux/macOS
          ```bash
          chmod +x scopes-*
          sudo mv scopes-* /usr/local/bin/scopes
          ```

          ### Windows
          Extract `scopes-*.exe` to a directory in your PATH.

          ## Security & Verification

          This release includes SLSA Level 3 provenance and Software Bill of Materials (SBOM) for comprehensive supply chain security.

          ### SLSA Provenance Verification
          ```bash
          # Install slsa-verifier
          go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest

          # Verify the binary (example for Linux)
          slsa-verifier verify-artifact scopes-v${{ needs.extract-version.outputs.tag_version }}-linux-x64 \
            --provenance-path multiple.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          ```

          ### SBOM (Software Bill of Materials)

          Each platform includes SBOM files in both industry-standard formats:
          - **CycloneDX** (JSON/XML): Security-focused with vulnerability tracking capabilities
          - Download: `sbom-{platform}-{arch}.json` or `sbom-{platform}-{arch}.xml`

          #### SBOM Usage Examples
          ```bash
          # Analyze dependencies with CycloneDX tools
          cyclonedx-cli analyze sbom-linux-x64.json

          # Import into OWASP Dependency-Track
          curl -X POST "http://dtrack-server/api/v1/bom" \
            -H "X-API-Key: your-api-key" \
            -H "Content-Type: application/json" \
            -d @sbom-linux-x64.json
          ```

          ### Manual Verification
          See the checksums in `binary-hash-*.txt` files for manual verification of binaries.
        files: |
          artifacts/*/scopes-*
          artifacts/*/binary-hash-*.txt
          sbom-artifacts/sbom-*.json
          sbom-artifacts/sbom-*.xml
        draft: false
        prerelease: ${{ contains(needs.extract-version.outputs.tag_version, '-') }}
        generate_release_notes: true

    - name: Upload SLSA provenance to release
      if: needs.provenance.result == 'success'
      run: |
        # Upload provenance files to the existing release
        for provenance_file in provenance/*.intoto.jsonl; do
          if [ -f "$provenance_file" ]; then
            gh release upload ${{ needs.extract-version.outputs.tag_version }} "$provenance_file"
          fi
        done
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
