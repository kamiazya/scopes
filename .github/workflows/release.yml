name: Release

on:
  push:
    tags: ['v*.*.*', 'v*.*.*-*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0, v2.0.0-alpha)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: read
  id-token: write
  attestations: write

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup Windows Build Environment
      if: matrix.platform == 'win32'
      uses: ./.github/actions/setup-windows-build

    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@7f488cf82a3629ee755e4e97342c01d6bed318fa # v1.3.5
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        # Remove 'v' prefix for SemVer compatibility (v1.0.0 -> 1.0.0)
        CLEAN_VERSION=${VERSION#v}
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $CLEAN_VERSION (from tag: $VERSION)"

    - name: Build native binary (Windows)
      if: matrix.platform == 'win32'
      run: |
        Set-Location "C:\build-workspace\scopes"
        $VERSION_ARG = "-Pversion=${{ steps.version.outputs.version }}"
        echo "Executing: .\gradlew.bat nativeCompile $VERSION_ARG"
        & .\gradlew.bat nativeCompile $VERSION_ARG
      shell: powershell
      env:
        GRADLE_USER_HOME: C:\gradle-cache

    - name: Build native binary (Unix)
      if: matrix.platform != 'win32'
      run: ./gradlew nativeCompile -Pversion="${{ steps.version.outputs.version }}"

    - name: Prepare binary for upload
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "win32" ]; then
          BINARY_NAME="scopes-${{ steps.version.outputs.tag_version }}-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          cp /c/build-workspace/scopes/presentation-cli/build/native/nativeCompile/scopes.exe "$BINARY_NAME"
        else
          BINARY_NAME="scopes-${{ steps.version.outputs.tag_version }}-${{ matrix.platform }}-${{ matrix.arch }}"
          cp presentation-cli/build/native/nativeCompile/scopes "$BINARY_NAME"
        fi
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
      id: binary

    - name: Generate SBOM (CycloneDX) (Windows)
      if: matrix.platform == 'win32'
      run: |
        Set-Location "C:\build-workspace\scopes"
        & .\gradlew.bat presentation-cli:cycloneDxBom
      shell: powershell
      env:
        GRADLE_USER_HOME: C:\gradle-cache

    - name: Generate SBOM (CycloneDX) (Unix)
      if: matrix.platform != 'win32'
      run: ./gradlew presentation-cli:cycloneDxBom


    - name: Generate hash for SLSA provenance
      shell: bash
      id: hash
      run: |
        set -euo pipefail
        echo "Generating hash for: ${{ steps.binary.outputs.binary_name }}"

        # Generate SHA256 hash for binary
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # On Windows, certutil outputs in a specific format, we need to extract just the hash
          HASH_OUTPUT=$(certutil -hashfile "${{ steps.binary.outputs.binary_name }}" SHA256)
          # Extract the second line which contains the hash
          HASH=$(echo "$HASH_OUTPUT" | sed -n '2p' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          HASH=$(shasum -a 256 "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        else
          HASH=$(sha256sum "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        fi

        echo "Hash: $HASH"
        echo "${{ steps.binary.outputs.binary_name }}:$HASH" >> hashes.txt
        echo "${{ steps.binary.outputs.binary_name }}:$HASH" > binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

        # Generate hashes for SBOM files
        if [ "${{ matrix.platform }}" = "win32" ]; then
          SBOM_JSON_PATH="/c/build-workspace/scopes/presentation-cli/build/reports/bom.json"
          SBOM_XML_PATH="/c/build-workspace/scopes/presentation-cli/build/reports/bom.xml"
        else
          SBOM_JSON_PATH="presentation-cli/build/reports/bom.json"
          SBOM_XML_PATH="presentation-cli/build/reports/bom.xml"
        fi
        
        if [ -f "$SBOM_JSON_PATH" ]; then
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            SBOM_JSON_HASH_OUTPUT=$(certutil -hashfile "$SBOM_JSON_PATH" SHA256)
            SBOM_JSON_HASH=$(echo "$SBOM_JSON_HASH_OUTPUT" | sed -n '2p' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            SBOM_JSON_HASH=$(shasum -a 256 "$SBOM_JSON_PATH" | awk '{print $1}')
          else
            SBOM_JSON_HASH=$(sha256sum "$SBOM_JSON_PATH" | awk '{print $1}')
          fi
          echo "sbom-${{ matrix.platform }}-${{ matrix.arch }}.json:$SBOM_JSON_HASH" >> hashes.txt
        fi

        if [ -f "$SBOM_XML_PATH" ]; then
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            SBOM_XML_HASH_OUTPUT=$(certutil -hashfile "$SBOM_XML_PATH" SHA256)
            SBOM_XML_HASH=$(echo "$SBOM_XML_HASH_OUTPUT" | sed -n '2p' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            SBOM_XML_HASH=$(shasum -a 256 "$SBOM_XML_PATH" | awk '{print $1}')
          else
            SBOM_XML_HASH=$(sha256sum "$SBOM_XML_PATH" | awk '{print $1}')
          fi
          echo "sbom-${{ matrix.platform }}-${{ matrix.arch }}.xml:$SBOM_XML_HASH" >> hashes.txt
        fi

        # Create base64 encoded hash for SLSA (portable across Linux and macOS)
        echo -n "${{ steps.binary.outputs.binary_name }}:sha256:$HASH" | base64 > hashes-b64-${{ matrix.platform }}-${{ matrix.arch }}.txt

        # Set output variable for downstream steps
        ALL_HASHES=$(cat hashes.txt | tr '\n' ' ' | sed 's/ $//')
        echo "hashes=$ALL_HASHES" >> $GITHUB_OUTPUT

    - name: Upload binary artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: binary-${{ matrix.platform }}-${{ matrix.arch }}
        path: ${{ steps.binary.outputs.binary_name }}

    - name: Prepare SBOM files for upload
      shell: bash
      run: |
        # Copy SBOM files with platform-specific names
        if [ "${{ matrix.platform }}" = "win32" ]; then
          SBOM_JSON_PATH="/c/build-workspace/scopes/presentation-cli/build/reports/bom.json"
          SBOM_XML_PATH="/c/build-workspace/scopes/presentation-cli/build/reports/bom.xml"
        else
          SBOM_JSON_PATH="presentation-cli/build/reports/bom.json"
          SBOM_XML_PATH="presentation-cli/build/reports/bom.xml"
        fi
        
        if [ -f "$SBOM_JSON_PATH" ]; then
          cp "$SBOM_JSON_PATH" "sbom-${{ matrix.platform }}-${{ matrix.arch }}.json"
        fi

        if [ -f "$SBOM_XML_PATH" ]; then
          cp "$SBOM_XML_PATH" "sbom-${{ matrix.platform }}-${{ matrix.arch }}.xml"
        fi

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: sbom-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          sbom-${{ matrix.platform }}-${{ matrix.arch }}.json
          sbom-${{ matrix.platform }}-${{ matrix.arch }}.xml


    - name: Upload hash artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: hashes-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          hashes.txt
          hashes-b64-${{ matrix.platform }}-${{ matrix.arch }}.txt
          binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

  collect-hashes:
    name: Collect Hashes for SLSA
    runs-on: ubuntu-latest
    needs: build-release
    outputs:
      hashes: ${{ steps.collect.outputs.hashes }}

    steps:
    - name: Download Linux hash artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: hashes-linux-x64
        path: linux-hashes

    - name: Download macOS hash artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: hashes-darwin-x64
        path: darwin-hashes

    - name: Download Windows hash artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: hashes-win32-x64
        path: win32-hashes

    - name: Collect all hashes
      id: collect
      run: |
        set -euo pipefail
        echo "Collecting hashes from all platforms..."

        # List all downloaded files for debugging
        echo "Downloaded artifacts structure:"
        find . -name "*.txt" -type f | sort

        # Combine all base64 hash files from all platforms
        echo "Combining hashes from all platforms..."
        cat linux-hashes/hashes-b64-linux-x64.txt > combined-hashes-b64.txt
        cat darwin-hashes/hashes-b64-darwin-x64.txt >> combined-hashes-b64.txt
        cat win32-hashes/hashes-b64-win32-x64.txt >> combined-hashes-b64.txt

        # Create a single base64 encoded string with all hashes (comma-separated for SLSA)
        HASHES_B64=$(cat combined-hashes-b64.txt | tr '\n' ',' | sed 's/,$//')
        echo "hashes=$HASHES_B64" >> $GITHUB_OUTPUT

        echo "Collected hashes (base64):"
        cat combined-hashes-b64.txt
        
        echo "Collected hashes (readable):"
        cat linux-hashes/hashes.txt darwin-hashes/hashes.txt win32-hashes/hashes.txt

  provenance:
    name: Generate SLSA Provenance
    needs: [build-release, collect-hashes]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@5a775b367a56d5bd118a224a811bba288150a563 # v2.3.0
    with:
      base64-subjects: "${{ needs.collect-hashes.outputs.hashes }}"
      upload-assets: true

  create-draft-release:
    name: Create Draft GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, provenance]
    if: always() && needs.build-release.result == 'success'
    outputs:
      release-id: ${{ steps.create-draft.outputs.release-id }}
      upload-url: ${{ steps.create-draft.outputs.upload-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        # Remove 'v' prefix for SemVer compatibility (v1.0.0 -> 1.0.0)
        CLEAN_VERSION=${VERSION#v}
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        path: artifacts

    - name: Download all SBOM artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: sbom-*
        path: sbom-artifacts
        merge-multiple: true


    - name: Download SLSA provenance
      if: needs.provenance.result == 'success'
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: "${{ needs.provenance.outputs.provenance-name }}"
        path: provenance

    - name: Display downloaded artifacts
      run: find artifacts -type f -name "*" | head -20

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git log since last tag
        LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 2 | tail -n 1)
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG="Initial release"
        else
          CHANGELOG=$(git log --pretty=format:'- %s (%h)' $LAST_TAG..${{ steps.version.outputs.tag_version }} | head -20)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Bug fixes and improvements"
          fi
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Draft GitHub Release
      id: create-draft
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ steps.version.outputs.tag_version }}
        name: Release ${{ steps.version.outputs.tag_version }}
        body: |
          ## ⚠️ DRAFT RELEASE - Under Verification
          
          This release is currently being verified by automated tests. 
          **DO NOT USE** until verification is complete and this notice is removed.

          ---

          ## Changes
          ${{ steps.changelog.outputs.changelog }}

          ## Installation

          Download the appropriate binary for your platform from the assets below.

          ### Linux/macOS
          ```bash
          chmod +x scopes-*
          sudo mv scopes-* /usr/local/bin/scopes
          ```

          ### Windows
          Extract `scopes-*.exe` to a directory in your PATH.

          ## Security & Verification

          This release includes SLSA Level 3 provenance and Software Bill of Materials (SBOM) for comprehensive supply chain security.

          ### SLSA Provenance Verification
          ```bash
          # Install slsa-verifier
          go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest

          # Verify the binary (example for Linux)
          slsa-verifier verify-artifact scopes-${{ steps.version.outputs.tag_version }}-linux-x64 \
            --provenance-path multiple.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          ```

          ### SBOM (Software Bill of Materials)

          Each platform includes SBOM files in both industry-standard formats:
          - **CycloneDX** (JSON/XML): Security-focused with vulnerability tracking capabilities
          - Download: `sbom-{platform}-{arch}.json` or `sbom-{platform}-{arch}.xml`

          #### SBOM Usage Examples
          ```bash
          # Analyze dependencies with CycloneDX tools
          cyclonedx-cli analyze sbom-linux-x64.json

          # Import into OWASP Dependency-Track
          curl -X POST "http://dtrack-server/api/v1/bom" \
            -H "X-API-Key: your-api-key" \
            -H "Content-Type: application/json" \
            -d @sbom-linux-x64.json
          ```

          ### Manual Verification
          See the checksums in `binary-hash-*.txt` files for manual verification of binaries.
        files: |
          artifacts/*/scopes-*
          provenance/*.intoto.jsonl
          artifacts/*/binary-hash-*.txt
          sbom-artifacts/sbom-*.json
          sbom-artifacts/sbom-*.xml
        draft: true
        prerelease: ${{ contains(steps.version.outputs.tag_version, '-') }}
        generate_release_notes: true

  verify-installation:
    name: Verify Installation Scripts
    runs-on: ${{ matrix.os }}
    needs: [create-draft-release]
    if: always() && needs.create-draft-release.result == 'success'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            script: install.sh
            test_command: './scopes --version'
          - os: macos-latest
            platform: darwin
            arch: x64
            script: install.sh
            test_command: './scopes --version'
          - os: windows-latest
            platform: win32
            arch: x64
            script: install.ps1
            test_command: '.\scopes.exe --version'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Test installation script (Unix)
      if: runner.os != 'Windows'
      env:
        SCOPES_VERSION: ${{ steps.version.outputs.tag_version }}
        SCOPES_INSTALL_DIR: ${{ github.workspace }}/test-install
        SCOPES_FORCE_INSTALL: 'true'
        SCOPES_VERBOSE: 'true'
        SCOPES_SKIP_VERIFICATION: 'false'
      run: |
        chmod +x install/${{ matrix.script }}
        bash install/${{ matrix.script }}

    - name: Test installation script (Windows)
      if: runner.os == 'Windows'
      env:
        SCOPES_VERSION: ${{ steps.version.outputs.tag_version }}
        SCOPES_INSTALL_DIR: '${{ github.workspace }}\test-install'
        SCOPES_FORCE_INSTALL: 'true'
        SCOPES_VERBOSE: 'true'
        SCOPES_SKIP_VERIFICATION: 'false'
      shell: powershell
      run: |
        & install/${{ matrix.script }} -Verbose

    - name: Verify installation (Unix)
      if: runner.os != 'Windows'
      run: |
        cd ${{ github.workspace }}/test-install
        if [ -f scopes ]; then
          echo "✅ Binary installed successfully"
          chmod +x scopes
          if ${{ matrix.test_command }}; then
            echo "✅ Binary executes successfully"
          else
            echo "❌ Binary failed to execute"
            exit 1
          fi
        else
          echo "❌ Binary not found"
          exit 1
        fi

    - name: Verify installation (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Set-Location "${{ github.workspace }}\test-install"
        if (Test-Path "scopes.exe") {
          Write-Host "✅ Binary installed successfully"
          if (& ${{ matrix.test_command }}) {
            Write-Host "✅ Binary executes successfully"
          } else {
            Write-Host "❌ Binary failed to execute"
            exit 1
          }
        } else {
          Write-Host "❌ Binary not found"
          exit 1
        }

    - name: Test verify-release script
      if: runner.os != 'Windows'
      env:
        SCOPES_VERSION: ${{ steps.version.outputs.tag_version }}
        SCOPES_AUTO_DOWNLOAD: 'true'
        SCOPES_VERIFY_SLSA: 'false'
        SCOPES_VERIFY_HASH: 'true'
      run: |
        bash install/verify-release.sh

  finalize-or-cleanup-release:
    name: Finalize or Cleanup Release
    runs-on: ubuntu-latest
    needs: [create-draft-release, verify-installation]
    if: always() && needs.create-draft-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "tag_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Finalize release (on success)
      if: needs.verify-installation.result == 'success'
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ steps.version.outputs.tag_version }}
        name: Release ${{ steps.version.outputs.tag_version }}
        body: |
          ## ✅ VERIFIED RELEASE
          
          This release has been automatically verified across all supported platforms.

          ## Changes
          See release notes for detailed changes.

          ## Installation

          ### One-liner Installation (Recommended)

          #### Linux/macOS
          ```bash
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install/install.sh | sh
          ```

          #### Windows PowerShell
          ```powershell
          iwr https://raw.githubusercontent.com/${{ github.repository }}/main/install/install.ps1 | iex
          ```

          ### Manual Installation

          Download the appropriate binary for your platform from the assets below.

          #### Linux/macOS
          ```bash
          chmod +x scopes-*
          sudo mv scopes-* /usr/local/bin/scopes
          ```

          #### Windows
          Extract `scopes-*.exe` to a directory in your PATH.

          ## Security & Verification

          This release includes automated verification and Software Bill of Materials (SBOM) for comprehensive supply chain security.

          ### Automated Verification
          All binaries have been automatically verified during the release process:
          - ✅ SHA256 hash verification
          - ✅ Cross-platform installation testing
          - ✅ Binary execution testing

          ### Manual Verification
          ```bash
          # Download verification script
          curl -sSL -O https://raw.githubusercontent.com/${{ github.repository }}/main/install/verify-release.sh
          chmod +x verify-release.sh

          # Verify downloaded release
          ./verify-release.sh --download --version ${{ steps.version.outputs.tag_version }}
          ```

          ### SLSA Provenance Verification (if available)
          ```bash
          # Install slsa-verifier
          go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest

          # Verify the binary (example for Linux)
          slsa-verifier verify-artifact scopes-${{ steps.version.outputs.tag_version }}-linux-x64 \
            --provenance-path multiple.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          ```

          ### SBOM (Software Bill of Materials)

          Each platform includes SBOM files in both industry-standard formats:
          - **CycloneDX** (JSON/XML): Security-focused with vulnerability tracking capabilities
          - Download: `sbom-{platform}-{arch}.json` or `sbom-{platform}-{arch}.xml`

          #### SBOM Usage Examples
          ```bash
          # Analyze dependencies with CycloneDX tools
          cyclonedx-cli analyze sbom-linux-x64.json

          # Import into OWASP Dependency-Track
          curl -X POST "http://dtrack-server/api/v1/bom" \
            -H "X-API-Key: your-api-key" \
            -H "Content-Type: application/json" \
            -d @sbom-linux-x64.json
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.tag_version, '-') }}

    - name: Delete failed release (on failure)
      if: needs.verify-installation.result != 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "❌ Installation verification failed. Deleting release and tag..."
        
        # Delete the release
        gh release delete ${{ steps.version.outputs.tag_version }} --yes --cleanup-tag
        
        echo "🧹 Release and tag deleted due to verification failure"
        echo "Check the verify-installation job logs for details on what went wrong"
        
        # Exit with error to fail the workflow
        exit 1

    - name: Summary
      run: |
        if [ "${{ needs.verify-installation.result }}" = "success" ]; then
          echo "🎉 Release ${{ steps.version.outputs.tag_version }} has been successfully verified and published!"
          echo "Users can now safely install using the one-liner installation commands."
        else
          echo "❌ Release ${{ steps.version.outputs.tag_version }} failed verification and has been deleted."
          echo "Please check the logs and fix any issues before releasing again."
        fi
