name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0, v2.0.0-alpha)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
concurrency:
  group: release-${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read
  id-token: write
  attestations: write

jobs:
  resolve-version:
    name: Resolve Version Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_version: ${{ steps.version.outputs.tag_version }}
    steps:
      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          set -euo pipefail
          # Handle both workflow_dispatch (inputs.tag) and push (github.ref_name) triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          # Remove 'v' prefix for SemVer compatibility (v1.0.0 -> 1.0.0)
          CLEAN_VERSION=${VERSION#v}
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using tag: $VERSION (from ${{ github.event_name }})"

  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - name: Validate tag format
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ needs.resolve-version.outputs.tag_version }}"
          
          echo "Validating tag: $TAG"
          
          # Ensure tag follows semantic versioning pattern (SemVer 2.0.0 compliant)
          # Pattern explanation:
          # ^v                                           - Must start with 'v'
          # (0|[1-9][0-9]*)                             - Major version (no leading zeros except for 0)
          # \.(0|[1-9][0-9]*)                           - Minor version (no leading zeros except for 0)
          # \.(0|[1-9][0-9]*)                           - Patch version (no leading zeros except for 0)
          # (-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*) - Pre-release version
          # (\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))? - Additional pre-release identifiers
          # (\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?     - Build metadata (optional)
          # $                                           - End of string
          
          # Full SemVer 2.0.0 regex pattern
          SEMVER_PATTERN='^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$'
          
          if ! [[ "$TAG" =~ $SEMVER_PATTERN ]]; then
            echo "::error::Invalid tag format '$TAG'"
            echo ""
            echo "Tag must follow Semantic Versioning 2.0.0 specification:"
            echo "  Basic format:     vMAJOR.MINOR.PATCH"
            echo "  Pre-release:      vMAJOR.MINOR.PATCH-PRERELEASE"
            echo "  Build metadata:   vMAJOR.MINOR.PATCH+BUILD"
            echo "  Full format:      vMAJOR.MINOR.PATCH-PRERELEASE+BUILD"
            echo ""
            echo "Examples:"
            echo "  v1.0.0"
            echo "  v2.1.3-alpha"
            echo "  v1.0.0-alpha.1"
            echo "  v1.0.0-0.3.7"
            echo "  v1.0.0-x.7.z.92"
            echo "  v1.0.0+20130313144700"
            echo "  v1.0.0-beta+exp.sha.5114f85"
            echo ""
            echo "Rules:"
            echo "  - No leading zeros in numeric versions (except for 0 itself)"
            echo "  - Pre-release identifiers: alphanumeric and hyphens [0-9A-Za-z-]"
            echo "  - Pre-release versions have lower precedence than normal versions"
            
            # Check if this might be a branch name
            if [[ "$TAG" == "main" || "$TAG" == "master" || "$TAG" == "develop" || "$TAG" =~ ^(feature|fix|release|hotfix)/ ]]; then
              echo ""
              echo "::error::It appears you're trying to create a release with a branch name."
              echo "Please use a proper semantic version tag like v1.0.0"
              echo ""
              echo "If using gh workflow run:"
              echo "  gh workflow run release.yml --field tag='v1.0.0'"
              echo ""
              echo "If using GitHub API:"
              echo "  Ensure 'tag_name' is a version tag, not a branch name"
            fi
            exit 1
          fi
          
          # For manually triggered runs, ensure the tag exists on the remote
          # This prevents gh release create from accidentally creating a tag
          echo "Checking if tag exists on remote..."
          
          # Use GitHub API to check if tag exists
          if ! gh api "/repos/${{ github.repository }}/git/refs/tags/$TAG" >/dev/null 2>&1; then
            echo "::error::Tag '$TAG' does not exist on remote. Please create the tag first."
            echo ""
            echo "Tags should be created by the Version and Release workflow when merging Version PRs."
            echo "If you need to manually create a tag:"
            echo "  git tag -a $TAG -m \"Release $TAG\""
            echo "  git push origin $TAG"
            exit 1
          fi
          echo "✓ Tag exists on remote"
          
          echo "✓ Tag format is valid and tag exists"

  build-jar:
    name: Build JAR Distribution
    needs: [resolve-version, validate-tag]
    runs-on: ubuntu-latest
    outputs:
      jar_hash: ${{ steps.hash.outputs.jar_hash }}

    steps:
      - name: Harden the runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ needs.resolve-version.outputs.tag_version }}

      - name: Set up JDK 21
        uses: actions/setup-java@7a6d8a8234af8eb26422e24e3006232cccaa061b # v4.6.0
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4.4.3
        with:
          validate-wrappers: true

      - name: Build Shadow JAR
        run: |
          ./gradlew --no-daemon --scan clean :apps-scopes:shadowJar -Pversion="${{ needs.resolve-version.outputs.version }}"

      - name: Prepare JAR for upload
        shell: bash
        run: |
          # Copy JAR to root with version number
          cp apps/scopes/build/libs/scopes-${{ needs.resolve-version.outputs.version }}.jar scopes.jar

          # Generate SHA256 hash
          sha256sum scopes.jar > scopes.jar.sha256

          echo "JAR prepared: scopes.jar"
          ls -lh scopes.jar

      - name: Generate hash for SLSA provenance
        id: hash
        run: |
          JAR_HASH=$(sha256sum scopes.jar | awk '{print $1}')
          echo "jar_hash=scopes.jar:$JAR_HASH" >> $GITHUB_OUTPUT
          echo "Generated hash: $JAR_HASH"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: scopes-jar
          path: |
            scopes.jar
            scopes.jar.sha256
          retention-days: 7
          if-no-files-found: error


  collect-hashes:
    name: Collect Hashes for SLSA
    runs-on: ubuntu-latest
    needs: [validate-tag, build-jar]
    outputs:
      hashes: ${{ steps.collect.outputs.hashes }}

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Download JAR artifact for hash
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: scopes-jar
          path: jar-artifact

      - name: Collect JAR hash
        id: collect
        run: |
          set -euo pipefail
          echo "Collecting JAR hash..."

          # List downloaded files for debugging
          echo "JAR artifact:"
          ls -la jar-artifact/

          # Initialize the combined hashes file
          > combined-hashes.txt

          # Add JAR hash
          if [ -f "jar-artifact/scopes.jar" ]; then
            echo "Adding JAR hash..."
            JAR_HASH=$(sha256sum jar-artifact/scopes.jar | awk '{print $1}')
            echo "$JAR_HASH scopes.jar" >> combined-hashes.txt
          fi

          # Create base64 encoded string for SLSA (sha256sum format)
          HASHES_B64=$(cat combined-hashes.txt | base64 -w0)
          echo "hashes=$HASHES_B64" >> $GITHUB_OUTPUT

          echo "Collected hashes (pre-base64):"
          cat combined-hashes.txt

          echo "Base64 encoded for SLSA:"
          echo "$HASHES_B64"

  provenance:
    name: Generate SLSA Provenance
    needs: [validate-tag, build-jar, collect-hashes]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@f7dd8c54c2067bafc12ca7a55595d5ee9b75204a # v2.1.0
    with:
      base64-subjects: "${{ needs.collect-hashes.outputs.hashes }}"
      upload-assets: true

  create-jar-distribution:
    name: Create JAR Distribution Bundle
    needs: [resolve-version, build-jar, provenance]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ needs.resolve-version.outputs.tag_version }}

      - name: Download JAR artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: scopes-jar
          path: dist

      - name: Download SLSA provenance
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.provenance.outputs.provenance-name }}
          path: provenance

      - name: Download source SBOM
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: source-sbom
          path: sbom
        continue-on-error: true

      - name: Download binary SBOM
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: binary-sbom
          path: sbom
        continue-on-error: true

      - name: Create distribution structure
        run: |
          VERSION="${{ needs.resolve-version.outputs.version }}"

          # Create distribution directory
          mkdir -p "scopes-${VERSION}-jar-bundle"
          cd "scopes-${VERSION}-jar-bundle"

          # Copy JAR
          cp ../dist/scopes.jar .

          # Copy wrapper scripts
          mkdir -p bin
          cp ../bin/scopes bin/
          cp ../bin/scopes.bat bin/
          cp ../bin/scopes.ps1 bin/

          # Copy installation scripts
          cp ../install/install.sh .
          cp ../install/install.ps1 .

          # Create verification directory with hash and SLSA provenance
          mkdir -p verification
          cp ../dist/scopes.jar.sha256 verification/

          # Copy SLSA provenance if available
          if [ -f ../provenance/multiple.intoto.jsonl ]; then
            cp ../provenance/multiple.intoto.jsonl verification/
            echo "SLSA provenance included in verification/"
          else
            echo "Warning: SLSA provenance not found, skipping"
          fi

          # Copy SBOMs if available
          mkdir -p sbom
          if [ -f ../sbom/scopes-sbom.json ]; then
            cp ../sbom/scopes-sbom.json sbom/
            echo "Source SBOM (JSON) included in sbom/"
          fi
          if [ -f ../sbom/scopes-sbom.xml ]; then
            cp ../sbom/scopes-sbom.xml sbom/
            echo "Source SBOM (XML) included in sbom/"
          fi
          if [ -f ../sbom/scopes.jar.cdx.json ]; then
            cp ../sbom/scopes.jar.cdx.json sbom/scopes-binary-sbom.json
            echo "Binary SBOM (JSON) included in sbom/"
          fi

          # Copy documentation
          mkdir -p docs
          cp ../README.md docs/
          cp ../LICENSE docs/

          # Create README for distribution
          cat > README.md << 'EOF'
          # Scopes JAR Distribution

          This package contains the Scopes JAR distribution.

          ## Requirements

          - Java 21 or later

          For Java installation instructions, see:
          https://github.com/kamiazya/scopes/blob/main/docs/explanation/setup/java-setup.md

          ## Quick Start

          ### Unix/Linux/macOS

          ```bash
          # Install (requires Java 21+)
          sudo ./install.sh

          # Or install to custom directory
          ./install.sh --install-dir ~/.local

          # Verify installation
          scopes --help
          ```

          ### Windows

          ```powershell
          # Install (requires Java 21+)
          .\install.ps1

          # Or install to custom directory
          .\install.ps1 -InstallDir "$env:LOCALAPPDATA\scopes"

          # Verify installation
          scopes --help
          ```

          ## Manual Installation

          1. Ensure Java 21+ is installed: `java -version`
          2. Copy `scopes.jar` to `$INSTALL_DIR/lib/`
          3. Copy wrapper scripts from `bin/` to `$INSTALL_DIR/bin/`
          4. Add `$INSTALL_DIR/bin` to your PATH

          ## Verification

          ### SHA256 Hash Verification

          The distribution includes SHA256 hash for integrity verification:

          ```bash
          # Unix/Linux/macOS
          sha256sum -c verification/scopes.jar.sha256

          # Windows PowerShell
          $expectedHash = Get-Content verification\scopes.jar.sha256
          $actualHash = (Get-FileHash scopes.jar -Algorithm SHA256).Hash
          if ($actualHash -eq $expectedHash) { Write-Host "✓ Hash verified" }
          ```

          ### SLSA Provenance Verification (Optional)

          For supply chain security, this distribution includes SLSA Level 3 provenance:

          ```bash
          # Install slsa-verifier (if not already installed)
          go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest

          # Verify provenance
          slsa-verifier verify-artifact scopes.jar \
            --provenance-path verification/multiple.intoto.jsonl \
            --source-uri github.com/kamiazya/scopes
          ```

          ### Software Bill of Materials (SBOM)

          The distribution includes both source-level and binary-level SBOMs in the `sbom/` directory:

          - `scopes-sbom.json` - Source dependencies (CycloneDX JSON)
          - `scopes-sbom.xml` - Source dependencies (CycloneDX XML)
          - `scopes-binary-sbom.json` - Binary analysis (CycloneDX JSON)

          These can be used for vulnerability scanning, license compliance, and supply chain analysis.

          ## Documentation

          - Installation Guide: https://github.com/kamiazya/scopes/blob/main/docs/tutorials/getting-started.md
          - Java Setup: https://github.com/kamiazya/scopes/blob/main/docs/explanation/setup/java-setup.md

          ## Support

          - GitHub: https://github.com/kamiazya/scopes
          - Issues: https://github.com/kamiazya/scopes/issues
          EOF

          cd ..

          # Create tar.gz for Unix
          tar -czf "scopes-${VERSION}-jar-bundle.tar.gz" "scopes-${VERSION}-jar-bundle"

          # Create zip for Windows
          zip -r "scopes-${VERSION}-jar-bundle.zip" "scopes-${VERSION}-jar-bundle"

          # Calculate checksums
          sha256sum "scopes-${VERSION}-jar-bundle.tar.gz" > "scopes-${VERSION}-jar-bundle.tar.gz.sha256"
          sha256sum "scopes-${VERSION}-jar-bundle.zip" > "scopes-${VERSION}-jar-bundle.zip.sha256"

          echo "Distribution bundles created:"
          ls -lh scopes-${VERSION}-jar-bundle.*

      - name: Upload distribution bundles
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: jar-distribution-bundles
          path: |
            scopes-*.tar.gz
            scopes-*.tar.gz.sha256
            scopes-*.zip
            scopes-*.zip.sha256
          retention-days: 7
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [resolve-version, validate-tag, build-jar, provenance, create-jar-distribution]

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ needs.resolve-version.outputs.tag_version }}
          fetch-depth: 0

      - name: Download JAR distribution bundles
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: jar-distribution-bundles
          path: jar-distribution-bundles

      - name: Download SLSA provenance
        if: needs.provenance.result == 'success'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: "${{ needs.provenance.outputs.provenance-name }}"
          path: provenance

      - name: Generate enhanced release notes
        id: release_notes
        run: |
          # Generate release notes with verification instructions
          cat > release_notes.md << 'EOF'
          ## 🔐 Verification Instructions
          > **Security Notice**: This release is signed and includes SLSA provenance for supply chain security.

          ### Quick Installation
          Download the platform-specific bundle for your system and follow the included installation instructions.

          ### Manual Verification
          For detailed verification instructions, see our [Security Verification Guide](https://github.com/kamiazya/scopes/blob/main/docs/explanation/security/security-verification.md).

          ## 📦 Artifacts
          - Binary downloads include SHA-256 checksums
          - SLSA Level 3 provenance attached
          - SBOM files available in CycloneDX format

          ## 📚 Documentation
          - [Getting Started Guide](https://github.com/kamiazya/scopes/blob/main/docs/tutorials/getting-started.md)
          - [Security Verification](https://github.com/kamiazya/scopes/blob/main/docs/explanation/security/security-verification.md)
          - [SBOM Verification](https://github.com/kamiazya/scopes/blob/main/docs/explanation/security/sbom-verification.md)
          EOF

          # Store the custom content
          {
            echo "custom_content<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release with auto-generated notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate release notes using GitHub API
          NOTES=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name='${{ needs.resolve-version.outputs.tag_version }}' \
            --jq .body)
          
          # Create or update release without destructive deletion
          if ! gh release view "${{ needs.resolve-version.outputs.tag_version }}" > /dev/null 2>&1; then
            gh release create "${{ needs.resolve-version.outputs.tag_version }}" \
              --title "Release ${{ needs.resolve-version.outputs.version }}" \
              --notes "$NOTES" \
              --verify-tag \
              --prerelease=${{ contains(needs.resolve-version.outputs.tag_version, '-') }}
          else
            gh release edit "${{ needs.resolve-version.outputs.tag_version }}" --notes "$NOTES"
          fi

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload JAR distribution bundles (~10MB each)
          find jar-distribution-bundles -name "scopes-*-jar-bundle.tar.gz" -type f -exec gh release upload "${{ needs.resolve-version.outputs.tag_version }}" --clobber {} \;
          find jar-distribution-bundles -name "scopes-*-jar-bundle.zip" -type f -exec gh release upload "${{ needs.resolve-version.outputs.tag_version }}" --clobber {} \;
          find jar-distribution-bundles -name "scopes-*-jar-bundle.*.sha256" -type f -exec gh release upload "${{ needs.resolve-version.outputs.tag_version }}" --clobber {} \;

          # Upload SLSA provenance if available
          if [ -d "provenance" ] && [ -n "$(find provenance -name "*.intoto.jsonl" -type f)" ]; then
            find provenance -name "*.intoto.jsonl" -type f -exec gh release upload "${{ needs.resolve-version.outputs.tag_version }}" --clobber {} \;
          fi

      - name: Enhance release notes with custom content
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the auto-generated release notes
          AUTO_NOTES=$(gh release view "${{ needs.resolve-version.outputs.tag_version }}" --json body --jq '.body')


          # Create the combined release notes
          cat > combined_notes.md << 'EOF'
          ${{ steps.release_notes.outputs.custom_content }}

          ## Installation

          ### 🚀 Quick Install (Recommended)

          Download the JAR bundle for your platform and run the included installation script.

          **Requirements**: Java 21 or later ([Java Setup Guide](https://github.com/kamiazya/scopes/blob/main/docs/explanation/setup/java-setup.md))

          ### ☕ JAR Distribution

          - **Universal JAR Bundle (tar.gz)**: `scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.tar.gz` (~10MB)
          - **Universal JAR Bundle (zip)**: `scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.zip` (~10MB)

          The JAR bundle includes:
          - Universal JAR file (platform-independent)
          - Wrapper scripts for all platforms (bash, bat, PowerShell)
          - Installation scripts
          - SHA256 hash verification
          - Documentation

          #### Install from JAR Bundle
          ```bash
          # Linux/macOS
          tar -xzf scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.tar.gz
          cd scopes-*-jar-bundle
          sudo ./install.sh

          # Or install to custom directory
          ./install.sh --install-dir ~/.local

          # Windows PowerShell
          Expand-Archive scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.zip
          cd scopes-*-jar-bundle
          .\install.ps1

          # Or install to custom directory
          .\install.ps1 -InstallDir "$env:LOCALAPPDATA\scopes"
          ```

          ## Security & Verification

          This release includes SLSA Level 3 provenance for supply chain security.

          ### SLSA Provenance Verification
          ```bash
          # Install slsa-verifier
          go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest

          # Download the JAR and provenance
          wget https://github.com/${{ github.repository }}/releases/download/${{ needs.resolve-version.outputs.tag_version }}/scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${{ needs.resolve-version.outputs.tag_version }}/multiple.intoto.jsonl

          # Verify
          slsa-verifier verify-artifact scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.tar.gz \
            --provenance-path multiple.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          ```

          ### Manual Hash Verification
          ```bash
          # Verify JAR bundle hash
          sha256sum -c scopes-${{ needs.resolve-version.outputs.version }}-jar-bundle.tar.gz.sha256
          ```
          EOF
          # Add the auto-generated notes after our custom content
          echo "" >> combined_notes.md
          echo "$AUTO_NOTES" >> combined_notes.md

          # Update the release with combined content
          gh release edit "${{ needs.resolve-version.outputs.tag_version }}" --notes-file combined_notes.md
