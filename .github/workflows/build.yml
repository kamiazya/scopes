name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  cross-platform-build:
    name: Cross-Platform Native Build
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental == true }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
            experimental: true

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup MSBuild (Windows only)
      if: matrix.platform == 'win32'
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@7f488cf82a3629ee755e4e97342c01d6bed318fa # v1.3.5
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

    - name: Copy project to C: drive (Windows only)
      if: matrix.platform == 'win32'
      run: |
        New-Item -ItemType Directory -Path "C:\build-workspace" -Force
        Copy-Item -Path "." -Destination "C:\build-workspace\scopes" -Recurse -Force
        Write-Host "Project copied to C:\build-workspace\scopes"
      shell: powershell

    - name: Build Native Image (Windows)
      if: matrix.platform == 'win32'
      run: .\gradlew.bat nativeCompile
      working-directory: C:\build-workspace\scopes
      env:
        # Fix cross-drive path issues on Windows by using C: drive for everything
        GRADLE_USER_HOME: C:\\gradle-cache

    - name: Build Native Image (Unix)
      if: matrix.platform != 'win32'
      run: ./gradlew nativeCompile

    - name: Prepare binary for security check
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "win32" ]; then
          BINARY_NAME="scopes-build-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          cp /c/build-workspace/scopes/presentation-cli/build/native/nativeCompile/scopes.exe "$BINARY_NAME"
        else
          BINARY_NAME="scopes-build-${{ matrix.platform }}-${{ matrix.arch }}"
          cp presentation-cli/build/native/nativeCompile/scopes "$BINARY_NAME"
        fi
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
      id: binary

    - name: Generate binary hash
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          HASH=$(certutil -hashfile "${{ steps.binary.outputs.binary_name }}" SHA256 | findstr /v "hash" | findstr /v "CertUtil")
          HASH=$(echo $HASH | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          HASH=$(shasum -a 256 "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        else
          HASH=$(sha256sum "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        fi

        echo "Hash: $HASH"
        echo "${{ steps.binary.outputs.binary_name }}:$HASH" > binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

    - name: Basic security checks
      shell: bash
      run: |
        echo "=== Binary Security Analysis ==="
        echo "File: ${{ steps.binary.outputs.binary_name }}"

        # File size check (reasonable size limits)
        SIZE=$(ls -la "${{ steps.binary.outputs.binary_name }}" | awk '{print $5}')
        echo "Size: $SIZE bytes"

        # Basic file type verification
        if command -v file >/dev/null 2>&1; then
          echo "File type:"
          file "${{ steps.binary.outputs.binary_name }}"
        fi

        # Check if binary is executable
        if [ "${{ matrix.platform }}" != "win32" ]; then
          if [ -x "${{ steps.binary.outputs.binary_name }}" ]; then
            echo "✅ Binary is executable"
          else
            echo "❌ Binary is not executable"
            exit 1
          fi
        fi

        # Check for suspicious strings (basic malware detection)
        if command -v strings >/dev/null 2>&1; then
          echo "Checking for suspicious strings..."
          SUSPICIOUS=$(strings "${{ steps.binary.outputs.binary_name }}" | grep -i -E "(eval|exec|system|shell|cmd|powershell|wget|curl)" | head -5 || true)
          if [ -n "$SUSPICIOUS" ]; then
            echo "⚠️ Found potentially suspicious strings (may be normal for CLI tools):"
            echo "$SUSPICIOUS"
          else
            echo "✅ No obviously suspicious strings found"
          fi
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: build-binary-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          ${{ steps.binary.outputs.binary_name }}
          binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

  security-scan:
    name: Binary Security Scan
    runs-on: ubuntu-latest
    needs: cross-platform-build
    if: always() && needs.cross-platform-build.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Download all binary artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: build-binary-*
        path: binaries
        merge-multiple: true

    - name: Install Grype
      uses: anchore/scan-action/download-grype@1638637db639e0ade3258b51db49a9a137574c3e # v6.5.1

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@7b36ad622f042cab6f59a75c2ac24ccb256e9b45 # v0.20.4

    - name: Scan binaries with Grype
      run: |
        echo "=== Grype Vulnerability Scan ==="
        for binary in binaries/scopes-build-*; do
          if [ -f "$binary" ] && [ ! "$binary" = "*.txt" ]; then
            echo "Scanning: $binary"
            grype "$binary" --output json --file "${binary}-grype-report.json" || true
            grype "$binary" --output table || true
            echo "---"
          fi
        done

    - name: Generate SBOMs for binaries
      run: |
        echo "=== Syft SBOM Generation ==="
        for binary in binaries/scopes-build-*; do
          if [ -f "$binary" ] && [ ! "$binary" = "*.txt" ]; then
            echo "Generating SBOM for: $binary"
            syft "$binary" --output cyclonedx-json --file "${binary}-sbom.json" || true
            syft "$binary" --output table || true
            echo "---"
          fi
        done


    - name: Verify binary integrity
      run: |
        echo "=== Binary Integrity Verification ==="
        cd binaries
        for hash_file in binary-hash-*.txt; do
          if [ -f "$hash_file" ]; then
            echo "Verifying: $hash_file"
            cat "$hash_file"

            # Extract binary name and expected hash
            BINARY_NAME=$(cut -d':' -f1 "$hash_file")
            EXPECTED_HASH=$(cut -d':' -f2 "$hash_file")

            if [ -f "$BINARY_NAME" ]; then
              ACTUAL_HASH=$(sha256sum "$BINARY_NAME" | awk '{print $1}')
              if [ "$ACTUAL_HASH" = "$EXPECTED_HASH" ]; then
                echo "✅ $BINARY_NAME integrity verified"
              else
                echo "❌ $BINARY_NAME integrity check failed!"
                echo "Expected: $EXPECTED_HASH"
                echo "Actual: $ACTUAL_HASH"
                exit 1
              fi
            else
              echo "⚠️ Binary file $BINARY_NAME not found"
            fi
            echo "---"
          fi
        done

    - name: Upload security scan results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: always()
      with:
        name: security-scan-results
        path: |
          binaries/*-grype-report.json
          binaries/*-sbom.json
