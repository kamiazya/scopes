name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:
    inputs:
      version:
        description: 'Version to build (for releases)'
        required: false
        type: string
      binary-prefix:
        description: 'Binary name prefix (for releases)'
        required: false
        type: string
        default: 'scopes-build'
    outputs:
      hashes:
        description: 'Generated hashes from build'
        value: ${{ jobs.cross-platform-build.outputs.hashes }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  cross-platform-build:
    name: Cross-Platform Native Build
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental == true }}
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
            experimental: true

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup Windows Build Environment
      if: matrix.platform == 'win32'
      uses: ./.github/actions/setup-windows-build
      with:
        version: ${{ inputs.version }}

    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@7f488cf82a3629ee755e4e97342c01d6bed318fa # v1.3.5
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

    - name: Build Native Image (Unix)
      if: matrix.platform != 'win32'
      run: |
        VERSION_ARG=""
        if [ -n "${{ inputs.version }}" ]; then
          VERSION_ARG="-Pversion=${{ inputs.version }}"
        fi
        ./gradlew nativeCompile $VERSION_ARG

    - name: Prepare binary for security check
      shell: bash
      run: |
        PREFIX="${{ inputs.binary-prefix || 'scopes-build' }}"
        if [ "${{ matrix.platform }}" = "win32" ]; then
          BINARY_NAME="${PREFIX}-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          cp /c/build-workspace/scopes/presentation-cli/build/native/nativeCompile/scopes.exe "$BINARY_NAME"
        else
          BINARY_NAME="${PREFIX}-${{ matrix.platform }}-${{ matrix.arch }}"
          cp presentation-cli/build/native/nativeCompile/scopes "$BINARY_NAME"
        fi
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
      id: binary

    - name: Generate binary hash
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          HASH=$(certutil -hashfile "${{ steps.binary.outputs.binary_name }}" SHA256 | findstr /v "hash" | findstr /v "CertUtil")
          HASH=$(echo $HASH | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          HASH=$(shasum -a 256 "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        else
          HASH=$(sha256sum "${{ steps.binary.outputs.binary_name }}" | awk '{print $1}')
        fi

        echo "Hash: $HASH"
        echo "${{ steps.binary.outputs.binary_name }}:$HASH" > binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

        # Set hash output for release workflow compatibility
        echo "hash=$HASH" >> $GITHUB_OUTPUT
      id: hash

    - name: Basic security checks
      shell: bash
      run: |
        echo "=== Binary Security Analysis ==="
        echo "File: ${{ steps.binary.outputs.binary_name }}"

        # File size check (reasonable size limits)
        SIZE=$(ls -la "${{ steps.binary.outputs.binary_name }}" | awk '{print $5}')
        echo "Size: $SIZE bytes"

        # Basic file type verification
        if command -v file >/dev/null 2>&1; then
          echo "File type:"
          file "${{ steps.binary.outputs.binary_name }}"
        fi

        # Check if binary is executable
        if [ "${{ matrix.platform }}" != "win32" ]; then
          if [ -x "${{ steps.binary.outputs.binary_name }}" ]; then
            echo "✅ Binary is executable"
          else
            echo "❌ Binary is not executable"
            exit 1
          fi
        fi

        # Check for suspicious strings (basic malware detection)
        if command -v strings >/dev/null 2>&1; then
          echo "Checking for suspicious strings..."
          SUSPICIOUS=$(strings "${{ steps.binary.outputs.binary_name }}" | grep -i -E "(eval|exec|system|shell|cmd|powershell|wget|curl)" | head -5 || true)
          if [ -n "$SUSPICIOUS" ]; then
            echo "⚠️ Found potentially suspicious strings (may be normal for CLI tools):"
            echo "$SUSPICIOUS"
          else
            echo "✅ No obviously suspicious strings found"
          fi
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: build-binary-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          ${{ steps.binary.outputs.binary_name }}
          binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

