name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:
    inputs:
      version:
        description: 'Version to build (for releases)'
        required: false
        type: string
      binary-prefix:
        description: 'Binary name prefix (for releases)'
        required: false
        type: string
        default: 'scopes-build'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  actions: read
  security-events: write

env:
  QUARKUS_BUILDER_IMAGE_LINUX_ARM64: "ghcr.io/graalvm/graalvm-ce:ol8-java11-22.3.3@sha256:1622fe4beeb753c07e9196d9ab68755f42d661872a1e9b548b549d6e60194477"

jobs:
  cross-platform-build:
    name: Cross-Platform Native Build
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental == true }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: macos-13
            platform: darwin
            arch: x64
          - os: macos-14
            platform: darwin
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x64
            experimental: true
          - os: windows-latest
            platform: win32
            arch: arm64
            experimental: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup QEMU for ARM64 cross-compilation
      if: matrix.platform == 'linux' && matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      with:
        platforms: linux/arm64

    - name: Setup Windows Build Environment
      if: matrix.platform == 'win32'
      uses: ./.github/actions/setup-windows-build
      with:
        version: ${{ inputs.version }}

    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@e140024fdc2d95d3c7e10a636887a91090d29990 # v1.4.0
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4.4.3
      with:
        validate-wrappers: true
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}

    - name: Generate source-level SBOM (Windows)
      if: matrix.platform == 'win32'
      run: |
        Set-Location "C:\build-workspace\scopes"
        $VERSION_ARG = ""
        if ("${{ inputs.version }}" -and "${{ inputs.version }}" -ne "") {
          $VERSION_ARG = "-Pversion=${{ inputs.version }}"
          echo "Using version argument: $VERSION_ARG"
        }
        echo "Executing: .\gradlew.bat --no-daemon --no-configuration-cache cycloneDx $VERSION_ARG"
        & .\gradlew.bat --no-daemon --no-configuration-cache cycloneDx $VERSION_ARG
      shell: powershell
      env:
        GRADLE_USER_HOME: C:\gradle-cache

    - name: Build Native Application (Windows)
      if: matrix.platform == 'win32'
      run: |
        Set-Location "C:\build-workspace\scopes"
        $VERSION_ARG = ""
        if ("${{ inputs.version }}" -and "${{ inputs.version }}" -ne "") {
          $VERSION_ARG = "-Pversion=${{ inputs.version }}"
          echo "Using version argument: $VERSION_ARG"
        }

        # Add architecture-specific flags for ARM64
        $ARCH_FLAGS = ""
        if ("${{ matrix.arch }}" -eq "arm64") {
          $ARCH_FLAGS = "-Dquarkus.native.additional-build-args=--target=aarch64-pc-windows"
        }

        echo "Executing: .\gradlew.bat --no-daemon --no-configuration-cache --scan :apps-scopes:nativeCompile :apps-scopesd:nativeCompile $VERSION_ARG $ARCH_FLAGS"
        & .\gradlew.bat --no-daemon --no-configuration-cache --scan :apps-scopes:nativeCompile :apps-scopesd:nativeCompile $VERSION_ARG $ARCH_FLAGS
      shell: powershell
      env:
        GRADLE_USER_HOME: C:\gradle-cache

    - name: Run E2E tests on native binary (Windows)
      if: matrix.platform == 'win32'
      run: |
        Set-Location "C:\build-workspace\scopes"
        Write-Host "Running E2E tests on native binary..."

        # Run full E2E test suite only on primary Windows build
        if ("${{ matrix.arch }}" -eq "x64") {
          $cliBinary = "C:\build-workspace\scopes\apps\scopes\build\native\nativeCompile\scopes.exe"
          $daemonBinary = "C:\build-workspace\scopes\apps\scopesd\build\native\nativeCompile\scopesd.exe"
          & .\gradlew.bat --no-daemon --no-configuration-cache :quality:e2e-tests:e2eTest `
            "-Pe2e.cli.binary=$cliBinary" `
            "-Pe2e.daemon.binary=$daemonBinary" `
            "-Pe2e.test.platform=win32" `
            "-Pe2e.test.arch=${{ matrix.arch }}"
        }
      shell: powershell
      continue-on-error: ${{ matrix.experimental == true }}
      env:
        GRADLE_USER_HOME: C:\gradle-cache

    - name: Generate source-level SBOM
      if: matrix.platform != 'win32'
      run: |
        VERSION_ARG=""
        if [ -n "${{ inputs.version }}" ]; then
          VERSION_ARG="-Pversion=${{ inputs.version }}"
        fi
        ./gradlew --no-daemon --no-configuration-cache cycloneDx $VERSION_ARG

    - name: Build Native Application (Unix)
      if: matrix.platform != 'win32'
      run: |
        VERSION_ARG=""
        if [ -n "${{ inputs.version }}" ]; then
          VERSION_ARG="-Pversion=${{ inputs.version }}"
        fi

        # Add architecture-specific flags for cross-compilation
        ARCH_FLAGS=""
        if [ "${{ matrix.platform }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          # For ARM64 Linux builds, we might need to use docker buildx or qemu
          echo "Building for Linux ARM64 - using QEMU emulation"
        fi

        # Build the CLI and daemon applications with native compilation
        ./gradlew --no-daemon --no-configuration-cache --scan :apps-scopes:nativeCompile :apps-scopesd:nativeCompile $VERSION_ARG $ARCH_FLAGS

    - name: Run E2E tests on native binary
      if: matrix.platform != 'win32'  # Unix/Linux/macOS
      run: |
        echo "Running E2E tests on native binary..."

        # Run full E2E test suite only on main platform builds
        if [ "${{ matrix.platform }}" = "linux" ] && [ "${{ matrix.arch }}" = "x64" ] || \
           [ "${{ matrix.platform }}" = "darwin" ]; then
          CLI_BINARY="apps/scopes/build/native/nativeCompile/scopes"
          DAEMON_BINARY="apps/scopesd/build/native/nativeCompile/scopesd"
          
          ./gradlew --no-daemon --no-configuration-cache :quality:e2e-tests:e2eTest \
            -Pe2e.cli.binary="$CLI_BINARY" \
            -Pe2e.daemon.binary="$DAEMON_BINARY" \
            -Pe2e.test.platform="${{ matrix.platform }}" \
            -Pe2e.test.arch="${{ matrix.arch }}"
        fi
      shell: bash
      continue-on-error: ${{ matrix.experimental == true }}

    - name: Prepare binaries for security check
      shell: bash
      run: |
        # Use a default prefix if none is provided
        PREFIX="${{ inputs.binary-prefix }}"
        if [ -z "$PREFIX" ]; then
          PREFIX="scopes-build"
        fi

        # Prepare CLI binary
        CLI_BINARY_NAME="${PREFIX}-${{ matrix.platform }}-${{ matrix.arch }}"
        DAEMON_BINARY_NAME="scopesd-${PREFIX}-${{ matrix.platform }}-${{ matrix.arch }}"
        
        if [ "${{ matrix.platform }}" = "win32" ]; then
          CLI_BINARY_NAME="${CLI_BINARY_NAME}.exe"
          DAEMON_BINARY_NAME="${DAEMON_BINARY_NAME}.exe"
          cp /c/build-workspace/scopes/apps/scopes/build/native/nativeCompile/scopes.exe "$CLI_BINARY_NAME"
          cp /c/build-workspace/scopes/apps/scopesd/build/native/nativeCompile/scopesd.exe "$DAEMON_BINARY_NAME"
        else
          cp apps/scopes/build/native/nativeCompile/scopes "$CLI_BINARY_NAME"
          cp apps/scopesd/build/native/nativeCompile/scopesd "$DAEMON_BINARY_NAME"
        fi
        
        echo "cli_binary_name=$CLI_BINARY_NAME" >> $GITHUB_OUTPUT
        echo "daemon_binary_name=$DAEMON_BINARY_NAME" >> $GITHUB_OUTPUT
        # Keep backward compatibility
        echo "binary_name=$CLI_BINARY_NAME" >> $GITHUB_OUTPUT
      id: binary

    - name: Generate binary hashes
      shell: bash
      run: |
        # Function to calculate hash based on OS
        calculate_hash() {
          local file=$1
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # On Windows, certutil outputs in a specific format, we need to extract just the hash
            HASH_OUTPUT=$(certutil -hashfile "$file" SHA256)
            # Extract the second line which contains the hash
            echo "$HASH_OUTPUT" | sed -n '2p' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]'
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            shasum -a 256 "$file" | awk '{print $1}'
          else
            sha256sum "$file" | awk '{print $1}'
          fi
        }

        # Generate hashes for both binaries
        CLI_HASH=$(calculate_hash "${{ steps.binary.outputs.cli_binary_name }}")
        DAEMON_HASH=$(calculate_hash "${{ steps.binary.outputs.daemon_binary_name }}")

        echo "CLI Hash: $CLI_HASH"
        echo "Daemon Hash: $DAEMON_HASH"
        
        # Save hashes to file
        echo "${{ steps.binary.outputs.cli_binary_name }}:$CLI_HASH" > binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt
        echo "${{ steps.binary.outputs.daemon_binary_name }}:$DAEMON_HASH" >> binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

        # Set hash outputs for release workflow compatibility
        echo "cli_hash=$CLI_HASH" >> $GITHUB_OUTPUT
        echo "daemon_hash=$DAEMON_HASH" >> $GITHUB_OUTPUT
        echo "hash=$CLI_HASH" >> $GITHUB_OUTPUT  # Backward compatibility
      id: hash

    - name: Basic security checks
      shell: bash
      run: |
        echo "=== Binary Security Analysis ==="
        
        # Function to check a binary
        check_binary() {
          local binary=$1
          local name=$2
          
          echo ""
          echo "Checking $name: $binary"
          echo "---"
          
          # File size check (reasonable size limits)
          SIZE=$(ls -la "$binary" | awk '{print $5}')
          echo "Size: $SIZE bytes"

          # Basic file type verification
          if command -v file >/dev/null 2>&1; then
            echo "File type:"
            file "$binary"
          fi

          # Check if binary is executable
          if [ "${{ matrix.platform }}" != "win32" ]; then
            if [ -x "$binary" ]; then
              echo "✅ Binary is executable"
            else
              echo "❌ Binary is not executable"
              exit 1
            fi
          fi

          # Check for suspicious strings (basic malware detection)
          if command -v strings >/dev/null 2>&1; then
            echo "Checking for suspicious strings..."
            SUSPICIOUS=$(strings "$binary" | grep -i -E "(eval|exec|system|shell|cmd|powershell|wget|curl)" | head -5 || true)
            if [ -n "$SUSPICIOUS" ]; then
              echo "⚠️ Found potentially suspicious strings (may be normal for CLI tools):"
              echo "$SUSPICIOUS"
            else
              echo "✅ No obviously suspicious strings found"
            fi
          fi
        }
        
        # Check both binaries
        check_binary "${{ steps.binary.outputs.cli_binary_name }}" "CLI"
        check_binary "${{ steps.binary.outputs.daemon_binary_name }}" "Daemon"

    - name: Upload binary artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: build-binary-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          ${{ steps.binary.outputs.cli_binary_name }}
          ${{ steps.binary.outputs.daemon_binary_name }}
          binary-hash-${{ matrix.platform }}-${{ matrix.arch }}.txt

    - name: Rename source-level SBOM (Windows)
      if: matrix.platform == 'win32'
      run: |
        Set-Location "C:\build-workspace\scopes"
        $bomFiles = Get-ChildItem -Path "apps\scopes\build\reports\bom.*" -ErrorAction SilentlyContinue
        if ($bomFiles) {
          foreach ($file in $bomFiles) {
            $extension = $file.Extension
            $newName = "bom-${{ matrix.platform }}-${{ matrix.arch }}$extension"
            Copy-Item $file.FullName $newName
            Write-Output "Renamed $($file.Name) to $newName"
          }
        } else {
          Write-Output "No BOM files found in apps\scopes\build\reports\"
        }
      shell: powershell

    - name: Rename source-level SBOM (Unix)
      if: matrix.platform != 'win32'
      run: |
        for bomfile in apps/scopes/build/reports/bom.*; do
          if [ -f "$bomfile" ]; then
            extension="${bomfile##*.}"
            newname="bom-${{ matrix.platform }}-${{ matrix.arch }}.${extension}"
            cp "$bomfile" "$newname"
            echo "Renamed $(basename $bomfile) to $newname"
          fi
        done
        ls -la bom-* || echo "No renamed BOM files found"

    - name: Upload source-level SBOM (Windows)
      if: matrix.platform == 'win32'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: source-sbom-${{ matrix.platform }}-${{ matrix.arch }}
        path: C:\build-workspace\scopes\bom-${{ matrix.platform }}-${{ matrix.arch }}.*
      continue-on-error: true

    - name: Upload source-level SBOM (Unix)
      if: matrix.platform != 'win32'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: source-sbom-${{ matrix.platform }}-${{ matrix.arch }}
        path: bom-${{ matrix.platform }}-${{ matrix.arch }}.*
      continue-on-error: true

  binary-security-scan:
    name: Binary Security Scan
    runs-on: ubuntu-latest
    needs: cross-platform-build
    if: always() && needs.cross-platform-build.result == 'success'

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Download all binary artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        pattern: build-binary-*
        path: binaries
        merge-multiple: true

    - name: Download source-level SBOMs
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        pattern: source-sbom-*
        path: source-sboms
      continue-on-error: true

    - name: Install Grype
      uses: anchore/scan-action/download-grype@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 # v7.0.0
      id: grype

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6
      id: syft

    - name: Scan binaries with Grype
      run: |
        echo "=== Grype Vulnerability Scan ==="
        # Use the same default prefix as in the build job
        PREFIX="${{ inputs.binary-prefix }}"
        if [ -z "$PREFIX" ]; then
          PREFIX="scopes-build"
        fi

        # Scan both CLI and daemon binaries
        for pattern in "${PREFIX}-*" "scopesd-${PREFIX}-*"; do
          for binary in binaries/$pattern; do
            if [ -f "$binary" ] && [[ ! "$binary" == *.txt ]]; then
              echo "Scanning: $binary"
              "${{ steps.grype.outputs.cmd }}" "$binary" --output json --file "${binary}-grype-report.json" || true
              "${{ steps.grype.outputs.cmd }}" "$binary" --output sarif --file "${binary}-grype-report.sarif" || true
              "${{ steps.grype.outputs.cmd }}" "$binary" --output table || true
              echo "---"
            fi
          done
        done

    - name: Generate SBOMs for binaries
      run: |
        echo "=== Syft SBOM Generation ==="
        # Use the same default prefix as in the build job
        PREFIX="${{ inputs.binary-prefix }}"
        if [ -z "$PREFIX" ]; then
          PREFIX="scopes-build"
        fi

        # Generate SBOMs for both CLI and daemon binaries
        for pattern in "${PREFIX}-*" "scopesd-${PREFIX}-*"; do
          for binary in binaries/$pattern; do
            if [ -f "$binary" ] && [[ ! "$binary" == *.txt ]]; then
              echo "Generating SBOM for: $binary"
              "${{ steps.syft.outputs.cmd }}" "$binary" --output cyclonedx-json --file "${binary}-sbom.json" || true
              "${{ steps.syft.outputs.cmd }}" "$binary" --output table || true
              echo "---"
            fi
          done
        done

    - name: Verify binary integrity
      run: |
        echo "=== Binary Integrity Verification ==="
        cd binaries
        for hash_file in binary-hash-*.txt; do
          if [ -f "$hash_file" ]; then
            echo "Verifying: $hash_file"
            cat "$hash_file"

            # Extract binary name and expected hash
            BINARY_NAME=$(cut -d':' -f1 "$hash_file")
            EXPECTED_HASH=$(cut -d':' -f2 "$hash_file")

            if [ -f "$BINARY_NAME" ]; then
              ACTUAL_HASH=$(sha256sum "$BINARY_NAME" | awk '{print $1}')
              if [ "$ACTUAL_HASH" = "$EXPECTED_HASH" ]; then
                echo "✅ $BINARY_NAME integrity verified"
              else
                echo "❌ $BINARY_NAME integrity check failed!"
                echo "Expected: $EXPECTED_HASH"
                echo "Actual: $ACTUAL_HASH"
                exit 1
              fi
            else
              echo "⚠️ Binary file $BINARY_NAME not found"
            fi
            echo "---"
          fi
        done

    - name: Upload security scan results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: always()
      with:
        name: security-scan-results
        path: |
          binaries/*-grype-report.json
          binaries/*-grype-report.sarif
          binaries/*-sbom.json
          source-sboms/**/*

    - name: Upload SARIF results to GitHub Security
      uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
      if: always()
      with:
        sarif_file: binaries
        category: vulnerability-scan
      continue-on-error: true


