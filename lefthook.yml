# Lefthook configuration for Scopes project
# https://github.com/evilmartians/lefthook

pre-commit:
  parallel: true
  commands:
    editorconfig:
      glob: "*"
      exclude: ".claude/.*|tmp/.*|LICENSE|gradle/verification-metadata.xml"
      run: |
        docker run --rm -v "$(pwd):/workspace" \
          -w /workspace \
          mstruebing/editorconfig-checker:latest \
          ec --exclude LICENSE --exclude gradle/verification-metadata.xml \
          {staged_files} || true
      skip:
        - merge
        - rebase

    spotless:
      glob: "**/*.{kt,kts,json,yml,yaml,md,sh}"
      run: ./gradlew spotlessApply --daemon
      stage_fixed: true
      skip:
        - merge
        - rebase

    detekt:
      glob: "**/*.kt"
      run: ./gradlew detekt --daemon
      skip:
        - merge
        - rebase

    kotlin-test:
      glob: "**/*.kt"
      run: ./gradlew test --daemon
      skip:
        - merge
        - rebase

    shellcheck:
      glob: "**/*.sh"
      run: |
        if command -v shellcheck &> /dev/null; then
          echo "üîç Running shellcheck on shell scripts..."
          shellcheck {staged_files}
        else
          echo "‚ùå shellcheck not found!"
          echo "   Please install shellcheck to validate shell scripts:"
          echo "   ‚Ä¢ macOS: brew install shellcheck"
          echo "   ‚Ä¢ Ubuntu/Debian: sudo apt install shellcheck"
          echo "   ‚Ä¢ CentOS/RHEL: sudo yum install shellcheck"
          echo "   ‚Ä¢ Or download from: https://github.com/koalaman/shellcheck"
          echo ""
          echo "   Skipping shell script validation for now..."
          exit 1
        fi
      skip:
        - merge
        - rebase

    yamllint:
      glob: "**/*.{yml,yaml}"
      run: |
        if command -v yamllint &> /dev/null; then
          echo "üîç Running yamllint on YAML files..."
          yamllint {staged_files}
        else
          echo "‚ùå yamllint not found!"
          echo "   Please install yamllint to validate YAML files:"
          echo "   ‚Ä¢ macOS: brew install yamllint"
          echo "   ‚Ä¢ Ubuntu/Debian: sudo apt install yamllint"
          echo "   ‚Ä¢ CentOS/RHEL: sudo yum install yamllint"
          echo "   ‚Ä¢ Or install with pip: pip install yamllint"
          echo ""
          echo "   Skipping YAML validation for now..."
          exit 1
        fi
      skip:
        - merge
        - rebase

    shfmt:
      glob: "**/*.sh"
      run: |
        if command -v shfmt &> /dev/null; then
          echo "üîç Checking shell script formatting with shfmt..."
          # Check if files need formatting
          if ! shfmt -d -i 2 -ci {staged_files}; then
            echo "‚ùå Shell scripts need formatting!"
            echo "   Run: shfmt -w -i 2 -ci {staged_files}"
            exit 1
          fi
          echo "‚úÖ Shell scripts are properly formatted"
        else
          echo "‚ùå shfmt not found!"
          echo "   Please install shfmt to format shell scripts:"
          echo "   ‚Ä¢ macOS: brew install shfmt"
          echo "   ‚Ä¢ Ubuntu/Debian: sudo apt install shfmt"
          echo "   ‚Ä¢ Or download from: https://github.com/mvdan/sh"
          echo ""
          echo "   Skipping shell script formatting check for now..."
          exit 1
        fi
      skip:
        - merge
        - rebase

# Claude Code integration - runs after file edits
post-tool-use-edit:
  parallel: true
  commands:
    spotless-format:
      glob: "**/*.{kt,kts,json,yml,yaml,md,sh}"
      run: |
        echo "üîß Auto-formatting file: {files}"
        ./gradlew spotlessApply --daemon --quiet
        echo "‚úÖ Spotless formatting completed"
    detekt-check:
      glob: "**/*.kt"
      run: |
        echo "üîç Running Detekt analysis with auto-correction"
        ./gradlew detekt -Pdetekt.autoCorrect=true --daemon --quiet || true
        echo "‚úÖ Detekt analysis completed"
    # Optional: Run tests for the affected module only
    module-test:
      glob: "**/*.kt"
      run: |
        # Extract module from file path and run tests for that module only
        MODULE_PATH=$(echo "{file}" | cut -d'/' -f1)
        if [ -f "$MODULE_PATH/build.gradle.kts" ]; then
          echo "Running tests for module: $MODULE_PATH"
          ./gradlew :$MODULE_PATH:test --daemon --quiet
        else
          echo "No module found for {file}, skipping tests"
        fi

# Skip hooks during CI/CD
skip_output:
  - meta
  - success
