-- Scopes table
CREATE TABLE IF NOT EXISTS scopes (
    id TEXT PRIMARY KEY NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    parent_id TEXT,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES scopes(id) ON DELETE CASCADE
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_scopes_parent_id ON scopes(parent_id);
CREATE INDEX IF NOT EXISTS idx_scopes_created_at ON scopes(created_at);
CREATE INDEX IF NOT EXISTS idx_scopes_updated_at ON scopes(updated_at);
CREATE INDEX IF NOT EXISTS idx_scopes_title_parent ON scopes(title, parent_id);
-- Optimizes paged queries by enabling index-order scan
CREATE INDEX IF NOT EXISTS idx_scopes_parent_created ON scopes(parent_id, created_at, id);
-- Optional but helpful for root scans (partial index)
CREATE INDEX IF NOT EXISTS idx_scopes_root_created ON scopes(created_at, id) WHERE parent_id IS NULL;

-- Insert scope
insertScope:
INSERT INTO scopes (id, title, description, parent_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?);

-- Update scope
updateScope:
UPDATE scopes
SET title = ?, description = ?, parent_id = ?, updated_at = ?
WHERE id = ?;

-- Find scope by ID
findScopeById:
SELECT *
FROM scopes
WHERE id = ?;

-- Find scopes by parent ID
findScopesByParentId:
SELECT *
FROM scopes
WHERE parent_id = ?
ORDER BY created_at ASC, id ASC;

-- Find scopes by parent ID with pagination (ascending by creation time)
findScopesByParentIdPaged:
SELECT *
FROM scopes
WHERE parent_id = ?
ORDER BY created_at ASC, id ASC
LIMIT ? OFFSET ?;

-- Find root scopes
findRootScopes:
SELECT *
FROM scopes
WHERE parent_id IS NULL
ORDER BY created_at ASC, id ASC;

-- Find root scopes with pagination (ascending by creation time)
findRootScopesPaged:
SELECT *
FROM scopes
WHERE parent_id IS NULL
ORDER BY created_at ASC, id ASC
LIMIT ? OFFSET ?;

-- Find scopes by parent ID after cursor (keyset pagination)
findScopesByParentIdAfter:
SELECT *
FROM scopes
WHERE parent_id = :parent_id AND (created_at, id) > (:created_at, :id)
ORDER BY created_at ASC, id ASC
LIMIT :limit;

-- Find root scopes after cursor (keyset pagination)
findRootScopesAfter:
SELECT *
FROM scopes
WHERE parent_id IS NULL AND (created_at, id) > (:created_at, :id)
ORDER BY created_at ASC, id ASC
LIMIT :limit;

-- Count helpers for pagination
countScopesByParentId:
SELECT COUNT(*) AS count
FROM scopes
WHERE parent_id = ?;

countRootScopes:
SELECT COUNT(*) AS count
FROM scopes
WHERE parent_id IS NULL;

-- Check if scope exists
existsById:
SELECT COUNT(*) > 0 AS result
FROM scopes
WHERE id = ?;

-- Check if scope exists by title and parent
existsByTitleAndParent:
SELECT COUNT(*) > 0 AS result
FROM scopes
WHERE title = ? AND parent_id = ?;

-- Check if scope exists by title (root level)
existsByTitleRoot:
SELECT COUNT(*) > 0 AS result
FROM scopes
WHERE title = ? AND parent_id IS NULL;

-- Find scope ID by title and parent
findScopeIdByTitleAndParent:
SELECT id
FROM scopes
WHERE title = ? AND parent_id = ?;

-- Find scope ID by title (root level)
findScopeIdByTitleRoot:
SELECT id
FROM scopes
WHERE title = ? AND parent_id IS NULL;

-- Count children
countChildren:
SELECT COUNT(*) AS count
FROM scopes
WHERE parent_id = ?;

-- Delete scope
deleteScope:
DELETE FROM scopes
WHERE id = ?;

-- Select all scopes
selectAll:
SELECT *
FROM scopes
ORDER BY created_at DESC, id DESC;
